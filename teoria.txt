-Classe (descreve)
	Engloba listagem de atributos e apartir dela que s√£o moldados os objetos
        Ex: celular

-Objetos (caracter√≠sticas pr√≥prias, funcionalidades pr√≥prias e um escopo muito bem definido, e o 
            tipo dele ser√° definido a partir da classe que ele ser√° instanciado)
	Elemento do mundo real para o mundo da programa√ß√£o
        Ex: Iphone

-Atributos
    S√£o as caracter√≠sticas do objeto
        Ex: Marca, Ano, Valor,Cor, mem√≥ria

-M√©todo
    O Que esse objeto faz, suas a√ß√µes/funcionalidades
        Ex: Liga, desliga..

-Instancia√ß√£o
    Cria√ß√£o de um objeto apartir de uma classe


S√≥ que podemos nos deparar com a seguinte quest√£o: e se eu quise criar um objeto com outros atributos
que n√£o tem na minha classe atual? N√£o seria legal modificar a classe atual porque isso poderia 
influenciar no comportamento de outros objetos que foram construidos apartir dos atributos listados nela..ü§î
agora entra um novo conceito...

   -Heran√ßa
Ela te permite criar uma classe apartir de outra classe(j√° criada) herdando seus atributos e m√©todos 
e adicionando novos


 - Polimorfismo
Capacidade do objeto assumir formas diferentes de acordo com contextos diferentes, ser tratado diferente a partir de contextos diferentes que eu estabele√ßo em meu c√≥digo .

Usando o exemplo da moto: podemos agrupar varios tipos de moto diferentes e estabelecer regras para que eles se comportem de forma igual para que seja possivel gerenciar no codigo
Fazemos isso por meio de classes abstratas e interfaces.

O que √© uma classe abstrata(regra, como deve ser)?
R:Esqueleto, escopo de uma classe. A classe que herdar dessa classe(ela ter√° que estar de acordo com o escopo dessa classe) abstrata poder√° ser instanciada, ou seja, a partir dela ser√° possivel a cria√ß√£o de um objeto 

O que √© uma interface?
R:√â um tipo de classe abstrata por√©m ela s√≥ ter√° os m√©todos/atributos abtratos ou seja, apenas o esqueleto sem implementa√ß√£o.


 - Encapsulamento 
Cria√ß√£o de uma prote√ß√£o/padr√£o, sendo que, este determina que o comportamento desse objeto ser√° sempre
o mesmo. Observa-se que, uma vez que este objeto esteja protegido o acesso a ele ser√° limitado. 
Existem tr√™s niveis que as classes podem receber:

P√∫blico : qualquer um acessa/modifica
Protegido: H√° um nivel de acesso para classes especificas( ou seja, n√£o √© qualquer uma que pode usar)
Private: apenas a pr√≥ria classe pode acessar os pr√≥prios dados











